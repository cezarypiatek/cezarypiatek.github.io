<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>design patterns on Cezary Piątek Blog</title>
    <link>https://cezarypiatek.github.io/tags/design-patterns/</link>
    <description>Recent content in design patterns on Cezary Piątek Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 15 Mar 2020 00:08:00 +0200</lastBuildDate>
    
	<atom:link href="https://cezarypiatek.github.io/tags/design-patterns/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Immutable types in C# with Roslyn</title>
      <link>https://cezarypiatek.github.io/post/immutable-types-with-roslyn/</link>
      <pubDate>Sun, 15 Mar 2020 00:08:00 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/immutable-types-with-roslyn/</guid>
      <description>Some time ago I came across Jimmy Bogard&amp;rsquo;s article &amp;ldquo;Immutability in DTOs?&amp;rdquo; about the pros and cons of using immutable type pattern/approach. I fully agree with the author - the idea of immutable types is great but without the proper support from the language syntax it might not be worth applying. C# allows creating immutable types by adding readonly keyword to fields or by removing setter from properties. We are obligated then to initialize those readonly members from the constructor or directly in the member&amp;rsquo;s definition.</description>
    </item>
    
  </channel>
</rss>