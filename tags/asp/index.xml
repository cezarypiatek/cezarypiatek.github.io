<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>asp on Cezary Piątek Blog</title>
    <link>https://cezarypiatek.github.io/tags/asp/</link>
    <description>Recent content in asp on Cezary Piątek Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Jan 2023 00:21:45 +0200</lastBuildDate><atom:link href="https://cezarypiatek.github.io/tags/asp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mocking dependencies in ASP.NET Core tests</title>
      <link>https://cezarypiatek.github.io/post/mocking-dependencies-in-asp-net-core/</link>
      <pubDate>Fri, 06 Jan 2023 00:21:45 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/mocking-dependencies-in-asp-net-core/</guid>
      <description>As I recently spent some time writing and refactoring tests that utilize WebApplicationFactory, I&amp;rsquo;ve come to have some thoughts and ideas for improvement that I&amp;rsquo;d like to share. In this article, I&amp;rsquo;ll delve into the process of mocking dependencies in a DI container when using WebApplicationFactory, and offer some insights and best practices I&amp;rsquo;ve learned along the way. Whether you&amp;rsquo;re a seasoned pro or new to unit testing ASP.NET Core applications, I hope this information will be helpful as you work to simplify and streamline your tests.</description>
    </item>
    
  </channel>
</rss>
