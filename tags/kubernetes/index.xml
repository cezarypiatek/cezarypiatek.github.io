<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes on Cezary Piątek Blog</title>
    <link>https://cezarypiatek.github.io/tags/kubernetes/</link>
    <description>Recent content in Kubernetes on Cezary Piątek Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 17 Aug 2023 00:10:45 +0200</lastBuildDate><atom:link href="https://cezarypiatek.github.io/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Collecting memory dumps for .NET Core on Kubernetes</title>
      <link>https://cezarypiatek.github.io/post/memory-dump-on-kubernetes/</link>
      <pubDate>Thu, 17 Aug 2023 00:10:45 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/memory-dump-on-kubernetes/</guid>
      <description>In the world of Kubernetes and microservices, diagnosing and debugging issues can be a challenging task. One powerful tool in your troubleshooting arsenal is memory dump analysis. Memory dumps capture the state of an application&amp;rsquo;s memory at a particular point in time, providing insights into potential issues, bottlenecks, and crashes. In this blog post, I&amp;rsquo;ll walk you through the process of collecting a memory dump from a .NET Core application running on Kubernetes.</description>
    </item>
    
  </channel>
</rss>
