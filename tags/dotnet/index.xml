<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dotnet on Cezary Piątek Blog</title>
    <link>https://cezarypiatek.github.io/tags/dotnet/</link>
    <description>Recent content in dotnet on Cezary Piątek Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 02 Aug 2020 00:11:45 +0200</lastBuildDate>
    
	<atom:link href="https://cezarypiatek.github.io/tags/dotnet/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Working efficiently with legacy database using Dapper</title>
      <link>https://cezarypiatek.github.io/post/dapper-tips-and-tricks/</link>
      <pubDate>Sun, 02 Aug 2020 00:11:45 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/dapper-tips-and-tricks/</guid>
      <description>A year ago I started working on a set of projects that requires accessing data from a huge legacy database. There was a decision to use Dapper to facilitate database access code. For those of you who are not familiar with Dapper, it&amp;rsquo;s a set of extension methods to IDbConnection, which allows to easily map C# object to SQL query parameters, as well as SQL query result to C# objects.</description>
    </item>
    
    <item>
      <title>How to simulate AutoMapper that works during the build time</title>
      <link>https://cezarypiatek.github.io/post/generate-mappings-on-build/</link>
      <pubDate>Sun, 01 Dec 2019 00:09:00 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/generate-mappings-on-build/</guid>
      <description>Almost two years ago I created the very first version of MappingGenerator. Since then, I&amp;rsquo;ve put a lot of work in this project, adding new functions and improving the mapping generation algorithm with 14 releases (43 issues/feature requests closed) in the meantime. With over 5.5k downloads from the marketplace and 380 stars on Github, it looks like there is quite a market demand for this kind of tool (even though my coffee button statistics indicate something different).</description>
    </item>
    
    <item>
      <title>Exception usage analyzer</title>
      <link>https://cezarypiatek.github.io/post/exceptions-usages-analyzer/</link>
      <pubDate>Sat, 29 Jun 2019 00:09:00 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/exceptions-usages-analyzer/</guid>
      <description>Over a year ago I wrote a blog post about designing exceptions. I found this article very useful by myself and I used it as a reference a few times during code review. However, it&amp;rsquo;s almost impossible to expect that, after reading the recommended resource, anybody would start to apply described rules immediately and remember about them all the time. It&amp;rsquo;s a learning process and it takes some time. A while ago I got interested with Roslyn (I even delivered a public presentation about it - polish recording available here) and there is a really cool thing about Roslyn analyzers that can solve this problem - they help to actively introduce best practices into your codebase.</description>
    </item>
    
    <item>
      <title>Renovate your .NET solution</title>
      <link>https://cezarypiatek.github.io/post/renovate-your-dot-net-solution/</link>
      <pubDate>Mon, 11 Feb 2019 00:20:45 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/renovate-your-dot-net-solution/</guid>
      <description>In the early days of dotnet core, there was an attempt of changing the C# project file format. The old &amp;ldquo;csproj&amp;rdquo; based on XML format was replaced with .xproj/project.json. However, after releasing dotnet core 1.0 the authors decided to get back to XML file. The format stayed the same but the specification went through a major change. With the new schema, a lot of improvements come into .net development and they are not restricted only to dotnet core projects.</description>
    </item>
    
    <item>
      <title>The art of designing exceptions</title>
      <link>https://cezarypiatek.github.io/post/the-art-of-designing-exceptions/</link>
      <pubDate>Fri, 19 Oct 2018 00:09:00 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/the-art-of-designing-exceptions/</guid>
      <description>Have you ever been in a situation when you discovered an exception in the logs that forced you to spend the next couple of minutes - or even hours - figuring out what exactly went wrong? The message was very cryptic and the only useful information that guided you to the crime scene was a stack trace. And after arriving there, you still had no idea what had really happened and what was the culprit.</description>
    </item>
    
    <item>
      <title>Generate mapping code with Roslyn code fix provider.</title>
      <link>https://cezarypiatek.github.io/post/generate-mapping-code-with-roslyn/</link>
      <pubDate>Tue, 27 Feb 2018 00:23:45 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/generate-mapping-code-with-roslyn/</guid>
      <description>A few weeks ago I posted about negative aspects of applying AutoMapper. As an alternative I suggested typing all mapping code by hand or utilize some kind of generator like T4Scaffoling or something Roslyn based. In the past I experimented with T4Scaffoling but it was quite tedious. It requires preparation of templates in T4 syntax, referencing it to the project and writing some PowerShell code to provide data for templates. There also was an issue with assembly locking.</description>
    </item>
    
    <item>
      <title>The reasons behind why I don&#39;t use AutoMapper.</title>
      <link>https://cezarypiatek.github.io/post/why-i-dont-use-automapper/</link>
      <pubDate>Mon, 05 Feb 2018 00:22:00 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/why-i-dont-use-automapper/</guid>
      <description>The idea behind this blog post is pretty old but I haven&amp;rsquo;t had enough motivation to write this down till now. Recently, I&amp;rsquo;ve came across a couple of new articles about AutoMapper and I&amp;rsquo;ve been struck when I saw how people utilize AutoMapper in their projects. I&amp;rsquo;ve encountered cases when AutoMapper transforms simple thing like mapping values from object to other into a really complex problem, which results with highly complicated code only for the price of not writing mappings explicitly.</description>
    </item>
    
  </channel>
</rss>