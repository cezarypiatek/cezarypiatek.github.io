<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WireMock on Cezary Piątek Blog</title>
    <link>https://cezarypiatek.github.io/tags/wiremock/</link>
    <description>Recent content in WireMock on Cezary Piątek Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 24 Sep 2023 00:10:45 +0200</lastBuildDate>
    <atom:link href="https://cezarypiatek.github.io/tags/wiremock/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sharing WireMock.NET in sequential and parallel tests</title>
      <link>https://cezarypiatek.github.io/post/wiremock-in-parallel-tests/</link>
      <pubDate>Sun, 24 Sep 2023 00:10:45 +0200</pubDate>
      <guid>https://cezarypiatek.github.io/post/wiremock-in-parallel-tests/</guid>
      <description>As .NET developers, we understand the significance of writing automated tests to ensure our applications function correctly. However, as our applications grow more complex and diverse, optimizing the test process becomes crucial. One effective approach is reusing components like tested application and WiremockServer instances between test cases. While this optimization can improve test efficiency, it can also introduce challenges of ensuring that different test cases do not interfere with each other.</description>
    </item>
    <item>
      <title>WireMock.NET - Troubleshooting</title>
      <link>https://cezarypiatek.github.io/post/mocking-outgoing-http-requests-p2/</link>
      <pubDate>Tue, 18 Apr 2023 00:10:45 +0200</pubDate>
      <guid>https://cezarypiatek.github.io/post/mocking-outgoing-http-requests-p2/</guid>
      <description>&lt;p&gt;In the second installment of my blog post series on WireMock.NET, I will be discussing some of the most common problems that developers encounter while using the library. WireMock troubleshooting can be quite time consuming, especially when you don&amp;rsquo;t know the drill. I hope that my guideline will save you a lot of time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>WireMock.NET - Introduction</title>
      <link>https://cezarypiatek.github.io/post/mocking-outgoing-http-requests-p1/</link>
      <pubDate>Sun, 02 Apr 2023 00:10:45 +0200</pubDate>
      <guid>https://cezarypiatek.github.io/post/mocking-outgoing-http-requests-p1/</guid>
      <description>In my previous blog post, I discussed the use of dependency injection (DI) containers for mocking dependencies in tests for ASP.NET Core applications. While this approach is useful in some cases, I personally prefer using mocks/stubs/fakes that don&amp;rsquo;t require any changes in the app internals and work directly with the actual protocol used by the application being tested.&#xA;In this post, I will introduce to you WireMock.NET, a powerful tool for mocking HTTP requests.</description>
    </item>
  </channel>
</rss>
