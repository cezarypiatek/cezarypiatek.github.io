<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cezary Piątek Blog</title>
    <link>https://cezarypiatek.github.io/</link>
    <description>Recent content on Cezary Piątek Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Aug 2018 00:21:18 +0200</lastBuildDate>
    
	<atom:link href="https://cezarypiatek.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Feature Object Pattern</title>
      <link>https://cezarypiatek.github.io/post/feature-object-pattern/</link>
      <pubDate>Sun, 05 Aug 2018 00:21:18 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/feature-object-pattern/</guid>
      <description>When it comes to writing maintainable UI test there always appears the term of Page Object Pattern. For those who are not familiar with Page Object, it&amp;rsquo;s the approach to building UI test that focuses on creating high-level abstraction over low-level details related to interaction with a tested application. This testing interface encapsulates all the noise related to technology and allows to clearly express intention of test cases. This concept is very well described by Martin Fowler here.</description>
    </item>
    
    <item>
      <title>Reactive testing</title>
      <link>https://cezarypiatek.github.io/post/reactive-testing/</link>
      <pubDate>Sat, 21 Jul 2018 00:21:18 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/reactive-testing/</guid>
      <description>public class UserListPage() { private readonly WebDriver driver; private readonly Lazy&amp;lt;Form&amp;gt; filterForm; private readonly Lazy&amp;lt;List&amp;gt; userList; private readonly new Lazy&amp;lt;List&amp;gt; listPagination; public UserListPage(WebDriver driver){ this.driver = driver; this.filterForm = new Lazy&amp;lt;Form&amp;gt;(x=&amp;gt; driver.FindFormWithId(&amp;quot;UserFilterForm&amp;quot;)); this.userList = new Lazy&amp;lt;List&amp;gt;(x=&amp;gt; driver.FindListWithId(&amp;quot;UserList&amp;quot;)); this.listPagination = new Lazy&amp;lt;List&amp;gt;(x=&amp;gt; driver.FindListWithId(&amp;quot;UserListPagination&amp;quot;)); } public void FilterWith(Action&amp;lt;Form&amp;gt; fillFilterFormAction) { fillFilterFormAction(this.filterForm); this.userList.Value.AffectWith(()=&amp;gt; this.filterForm.Value.ClickOnElementWithText(&amp;quot;Filter&amp;quot;)); } public void LoadPage(int pageNo){ this.userList.Value.AffectWith(()=&amp;gt; this.listPagination.Value.ClickOnElementWithText($&amp;quot;{pageNo}&amp;quot;)); } public int GetNumberOfUsers(){ return this.userList.Value.Count; } public void OpenUserDetails(string userName) { var listItem = this.</description>
    </item>
    
    <item>
      <title>Demystifying ELK stack</title>
      <link>https://cezarypiatek.github.io/post/demystifying-elk-stack/</link>
      <pubDate>Thu, 05 Jul 2018 00:21:18 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/demystifying-elk-stack/</guid>
      <description>Let&amp;rsquo;s assume that your system consists of a few microservices. Everything must have high availability so each microservice has at least two active instances on separate machines and everything must be multiplied by the number of testing and production related environments. When there is a situation that requires log analysis you have to skip from server to server looking for the file with desired information. You browse each file using some kind of notepad-based editor and if the files weight hundreds of megabytes it&amp;rsquo;s quite a challenge.</description>
    </item>
    
    <item>
      <title>Be the first to know of the bug</title>
      <link>https://cezarypiatek.github.io/post/be-the-first-to-know-of-the-bug/</link>
      <pubDate>Wed, 13 Jun 2018 00:21:45 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/be-the-first-to-know-of-the-bug/</guid>
      <description>Over a year ago I heard for the first time about the ELK stack. Since then I&amp;rsquo;ve had an opportunity to help five teams to implements ELK as a part of their development process (one team is using it on production, the rest of them so far only in development environment). ELK stands for ElasticSearch-Logstash-Kibana and it&amp;rsquo;s a set of services that helps to improve productivity in the area of logging, covering aspects of collecting, processing, storing and presenting log data.</description>
    </item>
    
    <item>
      <title>Space eaten up by Resharper</title>
      <link>https://cezarypiatek.github.io/post/space-eaten-up-by-resharper/</link>
      <pubDate>Mon, 07 May 2018 00:21:45 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/space-eaten-up-by-resharper/</guid>
      <description>My laptop stores everything on 250 GB SSD hard drive (actually Windows sees it as 223 GB), so from time to time I&amp;rsquo;m running out of free space. When there is a need I&amp;rsquo;m starting clearing-up by emptying c:\Users\user_name\AppData\Local\Temp\ and c:\Users\user_name\Downloads\ directories (the second one against all appearances is often full of unnecessary files). When this is not enough I use WinDirStart to analyze my hard disk usage. This simple but extremely useful tool presents directory tree with attributes related to disk utilization such as: size, usage percentage, number of items (files and subdirectories), etc.</description>
    </item>
    
    <item>
      <title>Validating fields of NHibernate model</title>
      <link>https://cezarypiatek.github.io/post/validate-fields-in-nhibernate-model/</link>
      <pubDate>Mon, 16 Apr 2018 00:22:53 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/validate-fields-in-nhibernate-model/</guid>
      <description>The challenge Recently I&amp;rsquo;ve had occasion to work much more than usually with NHibernate. This is a really great ORM and a very mature project, but when you make a mistake it informs you about that in a very generic way (in most cases). The problem that hunted me for a few days was the issue with field length constrains (which was caused by insufficient and inconsistent REST API validation).</description>
    </item>
    
    <item>
      <title>Generate mapping code with Roslyn code fix provider.</title>
      <link>https://cezarypiatek.github.io/post/generate-mapping-code-with-roslyn/</link>
      <pubDate>Tue, 27 Feb 2018 00:23:45 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/generate-mapping-code-with-roslyn/</guid>
      <description>A few weeks ago I posted about negative aspects of applying AutoMapper. As an alternative I suggested typing all mapping code by hand or utilize some kind of generator like T4Scaffoling or something Roslyn based. In the past I experimented with T4Scaffoling but it was quite tedious. It requires preparation of templates in T4 syntax, referencing it to the project and writing some PowerShell code to provide data for templates. There also was an issue with assembly locking.</description>
    </item>
    
    <item>
      <title>What&#39;s wrong with default ajax support in ASP.NET MVC and how to fix it.</title>
      <link>https://cezarypiatek.github.io/post/whats-wrong-with-unobtrusive-ajax/</link>
      <pubDate>Sun, 18 Feb 2018 00:22:00 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/whats-wrong-with-unobtrusive-ajax/</guid>
      <description>jquery.unobtrusive-ajax is the javascript library that every ASP.NET MVC developer certainly knows. It&amp;rsquo;s shipped with MVC bootstrapping template and it&amp;rsquo;s responsible for providing plumbing code which helps to add ajax functionality to rendered forms and links. Unfortunately, it has a few design drawbacks which could have negative impact on our system architecture and generate additional hidden costs. In this post I&amp;rsquo;m going to show you some of jquery.unobtrusive-ajax.js related problems I encountered in my 5-year journey as a ASP.</description>
    </item>
    
    <item>
      <title>The reasons behind why I don&#39;t use AutoMapper.</title>
      <link>https://cezarypiatek.github.io/post/why-i-dont-use-automapper/</link>
      <pubDate>Mon, 05 Feb 2018 00:22:00 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/why-i-dont-use-automapper/</guid>
      <description>The idea behind this blog post is pretty old but I haven&amp;rsquo;t had enough motivation to write this down till now. Recently, I&amp;rsquo;ve came across a couple of new articles about AutoMapper and I&amp;rsquo;ve been struck when I saw how people utilize AutoMapper in their projects. I&amp;rsquo;ve encountered cases when AutoMapper transforms simple thing like mapping values from object to other into a really complex problem, which results with highly complicated code only for the price of not writing mappings explicitly.</description>
    </item>
    
    <item>
      <title>Integrating TeamCity with Microsoft Teams using PowerShell</title>
      <link>https://cezarypiatek.github.io/post/integrating-teamcity-with-msteams/</link>
      <pubDate>Sun, 21 Jan 2018 00:05:18 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/integrating-teamcity-with-msteams/</guid>
      <description>With the beginning of new year I joined a new team where I help with project bootstrapping. I&amp;rsquo;ve been configuring TeamCity, Gitlab and webservers. It&amp;rsquo;s the first time for me to work with Gitlab, so I started looking around and checking what opportunities come to me with that tool. One of my discoveries was the &amp;ldquo;Integration&amp;rdquo; bookmark, allowing me to connect Gitlab with other systems. I checked a list of possible integrations and found that it could communicate with Microsoft Teams chat.</description>
    </item>
    
    <item>
      <title>Exploring PowerShell with graphical user interface.</title>
      <link>https://cezarypiatek.github.io/post/exploring-powershell-with-gui/</link>
      <pubDate>Sat, 30 Dec 2017 10:34:18 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/exploring-powershell-with-gui/</guid>
      <description>I&amp;rsquo;ve recently watched a pretty decent tutorial about DSC on Microsoft Virtual Academy. I&amp;rsquo;m not a huge fan of video tutorials because it always takes more time to watch them than read a book/blog post (you can hack it by increasing video speed and save yourself a couple of minutes) but sometimes there is additional beneficial side effect - the presenter can show you (accidentally or not) some tips and tricks not strictly related to the core subject of the video.</description>
    </item>
    
    <item>
      <title>Get rid of TODOs from your codebase.</title>
      <link>https://cezarypiatek.github.io/post/how-get-rid-of-todo-from-codebase/</link>
      <pubDate>Thu, 14 Dec 2017 22:34:18 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/how-get-rid-of-todo-from-codebase/</guid>
      <description>I&amp;rsquo;ve recently written an article about managing TODOs in the codebase with TODOExplorer. I&amp;rsquo;ve also proposed an idea of introducing code snippet for TODOs which helps to keep all TODOs in predefined format as well as provides more information about delayed task (author, receiver, date, issue tracker id). This article was a result of a few discussions with my programmer-colleagues and I hoped that that idea of TODOs snippet was worth sharing (I&amp;rsquo;ve been using it in my project for a while).</description>
    </item>
    
    <item>
      <title>The fastest way do debug .net code without sources.</title>
      <link>https://cezarypiatek.github.io/post/debug-without-sources-part-one/</link>
      <pubDate>Sun, 10 Dec 2017 10:38:18 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/debug-without-sources-part-one/</guid>
      <description>Some people used to say that a good programmer doesn&amp;rsquo;t need to debug his own code. However, sometimes we have a problem with third party libraries usage, for example: there is insufficient documentation or the module contains some bugs. Visual Studio has excellent debugging toolset but this is totally useless without symbols and sources (and this is often the case with third party libraries). Thanks to Reshaper decompiler this shouldn’t be a problem anymore.</description>
    </item>
    
    <item>
      <title>How to manage TODO in your codebase.</title>
      <link>https://cezarypiatek.github.io/post/how-to-manage-todo-in-codebase/</link>
      <pubDate>Sun, 03 Dec 2017 10:38:18 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/how-to-manage-todo-in-codebase/</guid>
      <description>It&amp;rsquo;s a good practice to make all things done at the first approach. But in the real world it&amp;rsquo;s not always possible - for example we need to ask customer for clarification and it will take some time, or worst - we don&amp;rsquo;t have enough time right now to implement things in the right way. In order to adress this issue, a TODO was invented to mark all those places in code requiring additional work.</description>
    </item>
    
    <item>
      <title>Why clicking with Selenium is so hard.</title>
      <link>https://cezarypiatek.github.io/post/why-click-with-selenium-so-hard/</link>
      <pubDate>Thu, 05 Oct 2017 17:38:18 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/why-click-with-selenium-so-hard/</guid>
      <description>When I browse StackOverflow questions tagged with selenium label, a lot of them are related to the problem of clicking on page elements. It seems to be one of the most trivial tasks, but can cause a lot of problems. Very often invoking Click() action on webelement ends with exceptions (there is a wide range of them). The main reason is that element on which we try to click is not in &amp;ldquo;Interactable&amp;rdquo; state.</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>https://cezarypiatek.github.io/projects/</link>
      <pubDate>Tue, 03 Oct 2017 20:17:23 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/projects/</guid>
      <description>Mapping Generator
&amp;ldquo;AutoMapper&amp;rdquo; like, Roslyn based, code fix provider that allows to generate mapping code in design time. You can download it as Visual Studio Extension from Visual Studio Marketplace.
 Tellurium
A utility pack to create maintainable and reliable UI tests using Selenium with additional support for ASP.NET MVC projects.
 Project Graphs
PowerShell module to draw a graph of c# projects dependencies. It can also spot some kind of issues with libraries and nuget packages references (for example: multiple version of the same library\package).</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://cezarypiatek.github.io/about/</link>
      <pubDate>Tue, 03 Oct 2017 19:59:11 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/about/</guid>
      <description>I started programming at 10 years old trying to retype some simple Basic programs from an old user guide to my C-64. It was just a temporary hobby but a few years later I bought a programmer magazine with C++ Builder on CD and started to write my first real programs. In high school I got interested in web development using Html, JavaScript and PHP. I graduated from the University of Science and Technology AGH (Kraków, Poland).</description>
    </item>
    
    <item>
      <title>Hunt your bugs in design time</title>
      <link>https://cezarypiatek.github.io/post/hunt-your-bugs-design-time/</link>
      <pubDate>Wed, 27 Apr 2016 21:27:16 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/hunt-your-bugs-design-time/</guid>
      <description>Static analysis is a powerful feature of Visual Studio that helps us to spot syntax and semantic errors in our code. It works very well on currently edited file and runs on the whole solution as one of the compilation stages. But it would be a waste of time to run compilation every time you make changes that affect code outside currently edited file, only to check that you didn&amp;rsquo;t cause any compilation errors.</description>
    </item>
    
    <item>
      <title>Save your history - TortoiseSVN and &#34;Repair move&#34; option.</title>
      <link>https://cezarypiatek.github.io/post/my-first-post/</link>
      <pubDate>Sun, 21 Sep 2014 17:38:18 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/my-first-post/</guid>
      <description>&lt;p&gt;TortoiseSVN has a function named simply “rename” which allows you to change the file name and keep the file history as well. But what if we change the file name for example during refactoring using Visual Studio? Are we fated to lose file history? Fortunately TortoiseSVN has an interesting option called “repair move”.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Don&#39;t write dull code - Resharper Live Templates</title>
      <link>https://cezarypiatek.github.io/post/livetemplates/</link>
      <pubDate>Sun, 13 Apr 2014 17:38:18 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/livetemplates/</guid>
      <description>One of the greatest features of Resharper are Live Templates. They can speed up your code typing and help you focus only on what is most important (you don’t need to remember and retype anymore long ‘dull’ code constructions). Live Templates are similar to Visual Studio code snippets but are easier to define and introduce smart parameters that help you in faster code completion.
Template Explorer You can manage Live Templates in Templates Explorer from RESHARPER menu (RESHARPER -&amp;gt; Template Explorer&amp;hellip;).</description>
    </item>
    
  </channel>
</rss>