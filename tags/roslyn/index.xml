<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>roslyn on Cezary Piątek Blog</title>
    <link>https://cezarypiatek.github.io/tags/roslyn/</link>
    <description>Recent content in roslyn on Cezary Piątek Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 Jun 2020 00:11:45 +0200</lastBuildDate>
    
	<atom:link href="https://cezarypiatek.github.io/tags/roslyn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Twin types - properties synchronization without inheritance</title>
      <link>https://cezarypiatek.github.io/post/csharp-twin-types/</link>
      <pubDate>Sun, 14 Jun 2020 00:11:45 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/csharp-twin-types/</guid>
      <description>A couple of months ago I&amp;rsquo;ve started working on a simple CRUD service. A mix of ASP Core for REST API with Dapper for Database access - probably one of the most popular stacks for this kind of application. Very quickly it turned out that it&amp;rsquo;s more complex than I expected and this &amp;ldquo;simple-boring&amp;rdquo; CRUD became more interesting and challenging.
The Problem One of the first problems that I came across was that I had a lot of types that looked very similar but had some differences and served different purposes, like:</description>
    </item>
    
    <item>
      <title>Improving non-nullable reference types handling</title>
      <link>https://cezarypiatek.github.io/post/better-non-nullable-handling/</link>
      <pubDate>Tue, 24 Mar 2020 20:00:00 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/better-non-nullable-handling/</guid>
      <description>A few weeks ago I started using non-nullable reference types - a new C# language feature which was shipped with version 8.0. It wasn&amp;rsquo;t a completely new experience for me, because I was working before on projects that were heavily utilizing [NotNull] and [CanBeNull] Resharper annotations. The way how non-nullable types are handled by Roslyn seems to be a little more complex in comparison to Resharper - there are around 40 different diagnostics related to this area.</description>
    </item>
    
    <item>
      <title>Immutable types in C# with Roslyn</title>
      <link>https://cezarypiatek.github.io/post/immutable-types-with-roslyn/</link>
      <pubDate>Sun, 15 Mar 2020 00:08:00 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/immutable-types-with-roslyn/</guid>
      <description>Some time ago I came across Jimmy Bogard&amp;rsquo;s article &amp;ldquo;Immutability in DTOs?&amp;rdquo; about the pros and cons of using immutable type pattern/approach. I fully agree with the author - the idea of immutable types is great but without the proper support from the language syntax it might not be worth applying. C# allows creating immutable types by adding readonly keyword to fields or by removing setter from properties. We are obligated then to initialize those readonly members from the constructor or directly in the member&amp;rsquo;s definition.</description>
    </item>
    
    <item>
      <title>How to simulate AutoMapper that works during the build time</title>
      <link>https://cezarypiatek.github.io/post/generate-mappings-on-build/</link>
      <pubDate>Sun, 01 Dec 2019 00:09:00 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/generate-mappings-on-build/</guid>
      <description>Almost two years ago I created the very first version of MappingGenerator. Since then, I&amp;rsquo;ve put a lot of work in this project, adding new functions and improving the mapping generation algorithm with 14 releases (43 issues/feature requests closed) in the meantime. With over 5.5k downloads from the marketplace and 380 stars on Github, it looks like there is quite a market demand for this kind of tool (even though my coffee button statistics indicate something different).</description>
    </item>
    
    <item>
      <title>Avoid thread synchronization problems with Roslyn: Synchronization primitives traps</title>
      <link>https://cezarypiatek.github.io/post/avoid-multithreading-traps-p2/</link>
      <pubDate>Sun, 15 Sep 2019 00:10:00 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/avoid-multithreading-traps-p2/</guid>
      <description>Multithreading is one of the most difficult aspects of programming and can cause a lot of headaches. The main source of problems is often the improper usage of synchronization mechanisms, which can result in deadlocks or a complete lack of synchronization despite our expectations. The effect of the broken synchronization can be analyzed with various runtime tools, but it would be nice to have an asset that is able to report all those issues in the design time right on the stage of writing code.</description>
    </item>
    
    <item>
      <title>CSharp Macros - let the Roslyn type for you</title>
      <link>https://cezarypiatek.github.io/post/csharp-macros/</link>
      <pubDate>Sun, 01 Sep 2019 00:11:45 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/csharp-macros/</guid>
      <description>I&amp;rsquo;m a programmer but I don&amp;rsquo;t like to write code. OK, it&amp;rsquo;s not the whole truth. I don&amp;rsquo;t like to write the code that is repeatable. Whenever I need to do something more than twice, I start thinking about automation. Hopefully, this problem can be addressed with code snippets. Visual Studio provides a predefined set of snippets that can be extended, but if you are a Resharper user you should definitely get to know LiveTemplates because it&amp;rsquo;s more powerful and easier to configure.</description>
    </item>
    
    <item>
      <title>Avoid multithreading traps with Roslyn: Lock object selection</title>
      <link>https://cezarypiatek.github.io/post/avoid-multithreading-traps-p1/</link>
      <pubDate>Sun, 18 Aug 2019 00:11:45 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/avoid-multithreading-traps-p1/</guid>
      <description>Multithreading is one of the most difficult aspects of programming and can cause a lot of headaches. The main source of problems is often improper usage of synchronization mechanisms, which can result in deadlocks or a complete lack of synchronization despite our expectations. The infamous deadlocks can be detected in runtime thanks to tools like Concurrency Visualizer, Parallel Tasks Window or with WinDBG !dlk command. However, these tools are often used only after some unexpected behavior is observed, but it would be nice to reduce the feedback loop and detect these issues in design time.</description>
    </item>
    
    <item>
      <title>Effective mocking</title>
      <link>https://cezarypiatek.github.io/post/effective-mocking/</link>
      <pubDate>Tue, 30 Jul 2019 00:20:45 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/effective-mocking/</guid>
      <description>Recently, I&amp;rsquo;ve been asked if Roslyn can be used for helping with writing code that involves preparing mocks with NSubstitute. Of course, my answer was &amp;quot;Yes&amp;quot; but instead of rushing into creating a new project that would implement this functionality, I performed a small research. I checked nuget.org and Visual Studio extensions marketplace, and I discovered that there was a bunch of existing analyzers and extensions that facilitated working with mocks and not only for NSubstitute but for other mocking frameworks, just like Moq or Fake It Easy, too.</description>
    </item>
    
    <item>
      <title>Exception usage analyzer</title>
      <link>https://cezarypiatek.github.io/post/exceptions-usages-analyzer/</link>
      <pubDate>Sat, 29 Jun 2019 00:09:00 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/exceptions-usages-analyzer/</guid>
      <description>Over a year ago I wrote a blog post about designing exceptions. I found this article very useful by myself and I used it as a reference a few times during code review. However, it&amp;rsquo;s almost impossible to expect that, after reading the recommended resource, anybody would start to apply described rules immediately and remember about them all the time. It&amp;rsquo;s a learning process and it takes some time. A while ago I got interested with Roslyn (I even delivered a public presentation about it - polish recording available here) and there is a really cool thing about Roslyn analyzers that can solve this problem - they help to actively introduce best practices into your codebase.</description>
    </item>
    
    <item>
      <title>Generate mapping code with Roslyn code fix provider.</title>
      <link>https://cezarypiatek.github.io/post/generate-mapping-code-with-roslyn/</link>
      <pubDate>Tue, 27 Feb 2018 00:23:45 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/generate-mapping-code-with-roslyn/</guid>
      <description>A few weeks ago I posted about negative aspects of applying AutoMapper. As an alternative I suggested typing all mapping code by hand or utilize some kind of generator like T4Scaffoling or something Roslyn based. In the past I experimented with T4Scaffoling but it was quite tedious. It requires preparation of templates in T4 syntax, referencing it to the project and writing some PowerShell code to provide data for templates. There also was an issue with assembly locking.</description>
    </item>
    
  </channel>
</rss>