<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>non-nullable on Cezary Piątek Blog</title>
    <link>https://cezarypiatek.github.io/tags/non-nullable/</link>
    <description>Recent content in non-nullable on Cezary Piątek Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 24 Mar 2020 20:00:00 +0200</lastBuildDate>
    
	<atom:link href="https://cezarypiatek.github.io/tags/non-nullable/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Improving non-nullable reference types handling</title>
      <link>https://cezarypiatek.github.io/post/better-non-nullable-handling/</link>
      <pubDate>Tue, 24 Mar 2020 20:00:00 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/better-non-nullable-handling/</guid>
      <description>A few weeks ago I started using non-nullable reference types - a new C# language feature which was shipped with version 8.0. It wasn&amp;rsquo;t a completely new experience for me, because I was working before on projects that were heavily utilizing [NotNull] and [CanBeNull] Resharper annotations. The way how non-nullable types are handled by Roslyn seems to be a little more complex in comparison to Resharper - there are around 40 different diagnostics related to this area.</description>
    </item>
    
    <item>
      <title>Immutable types in C# with Roslyn</title>
      <link>https://cezarypiatek.github.io/post/immutable-types-with-roslyn/</link>
      <pubDate>Sun, 15 Mar 2020 00:08:00 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/immutable-types-with-roslyn/</guid>
      <description>Some time ago I came across Jimmy Bogard&amp;rsquo;s article &amp;ldquo;Immutability in DTOs?&amp;rdquo; about the pros and cons of using immutable type pattern/approach. I fully agree with the author - the idea of immutable types is great but without the proper support from the language syntax it might not be worth applying. C# allows creating immutable types by adding readonly keyword to fields or by removing setter from properties. We are obligated then to initialize those readonly members from the constructor or directly in the member&amp;rsquo;s definition.</description>
    </item>
    
    <item>
      <title>Non-nullable references with C# 8 and .NET Core 3.0</title>
      <link>https://cezarypiatek.github.io/post/non-nullable-references-in-dotnet-core/</link>
      <pubDate>Sun, 06 Oct 2019 00:16:45 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/non-nullable-references-in-dotnet-core/</guid>
      <description>Two weeks ago .NET Core 3.0 was officially published. Together with the new framework version, Visual Studio 2019 got support for a long-awaited C# 8.0. The complete list of the new language features is available here on the MSDN, but the one that deserves special attention is Nullable reference types. This is a very important change in the language semantic, because from now we will be able to eliminate certain class of errors related to reference nullability on the compilation stage.</description>
    </item>
    
  </channel>
</rss>