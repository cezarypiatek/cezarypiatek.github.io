<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>code analysis on Cezary Piątek Blog</title>
    <link>https://cezarypiatek.github.io/tags/code-analysis/</link>
    <description>Recent content in code analysis on Cezary Piątek Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 16 Feb 2021 10:00:45 +0200</lastBuildDate>
    
	<atom:link href="https://cezarypiatek.github.io/tags/code-analysis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pure functions and unused return values</title>
      <link>https://cezarypiatek.github.io/post/pure-functions-and-unused-return-value/</link>
      <pubDate>Tue, 16 Feb 2021 10:00:45 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/pure-functions-and-unused-return-value/</guid>
      <description>A while ago I came across &amp;ldquo;Quick notes on a rant&amp;rdquo; authored by Don Syme. This rant criticizes the C# language for the lack of a few important features. The first point is &amp;quot;Implicitly discarding information is so 20th Century&amp;quot; which brings our attention to one of the sources of bugs in C# programs. Lucky me, I got the pleasure to make this kind of bug and find it later in production code, so this blog post is to save you the trouble.</description>
    </item>
    
    <item>
      <title>Twin types - properties synchronization without inheritance</title>
      <link>https://cezarypiatek.github.io/post/csharp-twin-types/</link>
      <pubDate>Sun, 14 Jun 2020 00:11:45 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/csharp-twin-types/</guid>
      <description>A couple of months ago I&amp;rsquo;ve started working on a simple CRUD service. A mix of ASP Core for REST API with Dapper for Database access - probably one of the most popular stacks for this kind of application. Very quickly it turned out that it&amp;rsquo;s more complex than I expected and this &amp;ldquo;simple-boring&amp;rdquo; CRUD became more interesting and challenging.
The Problem One of the first problems that I came across was that I had a lot of types that looked very similar but had some differences and served different purposes, like:</description>
    </item>
    
  </channel>
</rss>