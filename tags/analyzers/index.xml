<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>analyzers on Cezary Piątek Blog</title>
    <link>https://cezarypiatek.github.io/tags/analyzers/</link>
    <description>Recent content in analyzers on Cezary Piątek Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 18 Oct 2020 16:00:45 +0200</lastBuildDate>
    
	<atom:link href="https://cezarypiatek.github.io/tags/analyzers/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Async code smells and how to track them down with analyzers - Part II</title>
      <link>https://cezarypiatek.github.io/post/async-analyzers-p2/</link>
      <pubDate>Sun, 18 Oct 2020 16:00:45 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/async-analyzers-p2/</guid>
      <description>This blog post continues the series which is a guide through the code analyzers available on the market, and their possibilities. I&amp;rsquo;m trying to help you answer the question: &amp;ldquo;Which analyzer package should I use and how to configure it to avoid problems related to async/await?&amp;quot;. In the previous episode, I presented the first seven most common code smells related to asynchronous programming. Today, I present the next seven traps from this area.</description>
    </item>
    
    <item>
      <title>Async code smells and how to track them down with analyzers - Part I</title>
      <link>https://cezarypiatek.github.io/post/async-analyzers-p1/</link>
      <pubDate>Sun, 11 Oct 2020 00:11:45 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/async-analyzers-p1/</guid>
      <description>Roslyn analyzers are great. Not only do they detect different issues in our code, but they are also able to propose solutions, thanks to accompanying code fixes. There&amp;rsquo;s one more, less-advertised aspect of analyzers: besides improving the quality of our codebase, they also improve the state of language knowledge in our teams. This is a real time-saver during the code review because the technical, language-related remarks are reported automatically in design/build time.</description>
    </item>
    
  </channel>
</rss>