<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dotnetcore on Cezary Piątek Blog</title>
    <link>https://cezarypiatek.github.io/tags/dotnetcore/</link>
    <description>Recent content in dotnetcore on Cezary Piątek Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 Dec 2019 00:09:00 +0200</lastBuildDate>
    
	<atom:link href="https://cezarypiatek.github.io/tags/dotnetcore/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Setting assembly and nuget package metadata in .NET Core</title>
      <link>https://cezarypiatek.github.io/post/setting-assembly-and-package-metadata/</link>
      <pubDate>Mon, 09 Dec 2019 00:09:00 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/setting-assembly-and-package-metadata/</guid>
      <description>The new csproj format introduces two major changes that are important from the artifact metadata management perspective. First of all, a NuGet package definition was moved into the project file which allows sharing common attributes between NuGet package manifest and assembly info. Secondly, a new mechanism for generating source code of assembly metadata attributes was added, which shares some benefits from the first feature as well as simplify how these values can be overridden during the build process.</description>
    </item>
    
    <item>
      <title>Managing output in the .NET SDK projects</title>
      <link>https://cezarypiatek.github.io/post/managing-output-in-sdk-projects/</link>
      <pubDate>Sun, 03 Nov 2019 00:11:45 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/managing-output-in-sdk-projects/</guid>
      <description>With the new SDK format for .NET projects, it&amp;rsquo;s much easier to manage with the project&amp;rsquo;s dependencies. In most scenarios references added with standard mechanism (Visual Studio or dotnet cli) result in sufficient content in the output directory. However, sometimes we want to do something non-standard that requires a slightly different set of components in the output dir - simply speaking we expect to see there either more or fewer files.</description>
    </item>
    
    <item>
      <title>Non-nullable references with C# 8 and .NET Core 3.0</title>
      <link>https://cezarypiatek.github.io/post/non-nullable-references-in-dotnet-core/</link>
      <pubDate>Sun, 06 Oct 2019 00:16:45 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/non-nullable-references-in-dotnet-core/</guid>
      <description>Two weeks ago .NET Core 3.0 was officially published. Together with the new framework version, Visual Studio 2019 got support for a long-awaited C# 8.0. The complete list of the new language features is available here on the MSDN, but the one that deserves special attention is Nullable reference types. This is a very important change in the language semantic, because from now we will be able to eliminate certain class of errors related to reference nullability on the compilation stage.</description>
    </item>
    
  </channel>
</rss>