<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AspCore on Cezary Piątek Blog</title>
    <link>https://cezarypiatek.github.io/tags/aspcore/</link>
    <description>Recent content in AspCore on Cezary Piątek Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Jan 2024 00:10:45 +0200</lastBuildDate>
    <atom:link href="https://cezarypiatek.github.io/tags/aspcore/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The fastest way to create WireMock.NET mappings</title>
      <link>https://cezarypiatek.github.io/post/generate-wiremocknet-mappings-with-proxy/</link>
      <pubDate>Sun, 28 Jan 2024 00:10:45 +0200</pubDate>
      <guid>https://cezarypiatek.github.io/post/generate-wiremocknet-mappings-with-proxy/</guid>
      <description>In my journey through the nuances of API testing, I&amp;rsquo;ve often encountered the challenges and time-consuming aspects of creating accurate WireMock mappings. As developers, we often get bogged down in the details of the anatomy of inter-service communication, not to mention the frustrating typos that lead to inaccurate mappings. In this blog post, I will introduce a powerful solution: the WireMock.NET proxy. This feature completely changes the way we approach mapping preparation, significantly reducing both workload and debugging time.</description>
    </item>
    <item>
      <title>Mocking GraphQL queries with WireMock.NET</title>
      <link>https://cezarypiatek.github.io/post/mocking-graphql-with-wiremock/</link>
      <pubDate>Wed, 17 Jan 2024 00:10:45 +0200</pubDate>
      <guid>https://cezarypiatek.github.io/post/mocking-graphql-with-wiremock/</guid>
      <description>&lt;p&gt;GraphQL is a query language for APIs that allows clients to request exactly what they need, making data retrieval more efficient than traditional REST APIs. It supports three different types of client-server interaction: queries, mutations and subscriptions. When you start integrating a GraphQL API as a consumer in your application, it&amp;rsquo;s likely that you&amp;rsquo;ll need to write automated tests to ensure that the integration works correctly. In this blog post, I will show you how to mock GraphQL queries using WireMock.NET.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Common Setup and Teardown in dotnet tests without test framework magic</title>
      <link>https://cezarypiatek.github.io/post/maintainable-test-fixture/</link>
      <pubDate>Sat, 06 Jan 2024 00:10:45 +0200</pubDate>
      <guid>https://cezarypiatek.github.io/post/maintainable-test-fixture/</guid>
      <description>&lt;p&gt;In this blog post I describe the typical problems caused by the usage of &lt;code&gt;Setup&lt;/code&gt; and &lt;code&gt;Teardown&lt;/code&gt; method in dotnet tests and how those problems can be solved by using only C# language features.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sharing WireMock.NET in sequential and parallel tests</title>
      <link>https://cezarypiatek.github.io/post/wiremock-in-parallel-tests/</link>
      <pubDate>Sun, 24 Sep 2023 00:10:45 +0200</pubDate>
      <guid>https://cezarypiatek.github.io/post/wiremock-in-parallel-tests/</guid>
      <description>As .NET developers, we understand the significance of writing automated tests to ensure our applications function correctly. However, as our applications grow more complex and diverse, optimizing the test process becomes crucial. One effective approach is reusing components like tested application and WiremockServer instances between test cases. While this optimization can improve test efficiency, it can also introduce challenges of ensuring that different test cases do not interfere with each other.</description>
    </item>
    <item>
      <title>Collecting memory dumps for .NET Core on Kubernetes</title>
      <link>https://cezarypiatek.github.io/post/memory-dump-on-kubernetes/</link>
      <pubDate>Thu, 17 Aug 2023 00:10:45 +0200</pubDate>
      <guid>https://cezarypiatek.github.io/post/memory-dump-on-kubernetes/</guid>
      <description>In the world of Kubernetes and microservices, diagnosing and debugging issues can be a challenging task. One powerful tool in your troubleshooting arsenal is memory dump analysis. Memory dumps capture the state of an application&amp;rsquo;s memory at a particular point in time, providing insights into potential issues, bottlenecks, and crashes. In this blog post, I&amp;rsquo;ll walk you through the process of collecting a memory dump from a .NET Core application running on Kubernetes.</description>
    </item>
    <item>
      <title>WireMock.NET - Troubleshooting</title>
      <link>https://cezarypiatek.github.io/post/mocking-outgoing-http-requests-p2/</link>
      <pubDate>Tue, 18 Apr 2023 00:10:45 +0200</pubDate>
      <guid>https://cezarypiatek.github.io/post/mocking-outgoing-http-requests-p2/</guid>
      <description>&lt;p&gt;In the second installment of my blog post series on WireMock.NET, I will be discussing some of the most common problems that developers encounter while using the library. WireMock troubleshooting can be quite time consuming, especially when you don&amp;rsquo;t know the drill. I hope that my guideline will save you a lot of time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>WireMock.NET - Introduction</title>
      <link>https://cezarypiatek.github.io/post/mocking-outgoing-http-requests-p1/</link>
      <pubDate>Sun, 02 Apr 2023 00:10:45 +0200</pubDate>
      <guid>https://cezarypiatek.github.io/post/mocking-outgoing-http-requests-p1/</guid>
      <description>In my previous blog post, I discussed the use of dependency injection (DI) containers for mocking dependencies in tests for ASP.NET Core applications. While this approach is useful in some cases, I personally prefer using mocks/stubs/fakes that don&amp;rsquo;t require any changes in the app internals and work directly with the actual protocol used by the application being tested.&#xA;In this post, I will introduce to you WireMock.NET, a powerful tool for mocking HTTP requests.</description>
    </item>
    <item>
      <title>Mocking dependencies in ASP.NET Core tests</title>
      <link>https://cezarypiatek.github.io/post/mocking-dependencies-in-asp-net-core/</link>
      <pubDate>Fri, 06 Jan 2023 00:21:45 +0200</pubDate>
      <guid>https://cezarypiatek.github.io/post/mocking-dependencies-in-asp-net-core/</guid>
      <description>As I recently spent some time writing and refactoring tests that utilize WebApplicationFactory, I&amp;rsquo;ve come to have some thoughts and ideas for improvement that I&amp;rsquo;d like to share. In this article, I&amp;rsquo;ll delve into the process of mocking dependencies in a DI container when using WebApplicationFactory, and offer some insights and best practices I&amp;rsquo;ve learned along the way. Whether you&amp;rsquo;re a seasoned pro or new to unit testing ASP.NET Core applications, I hope this information will be helpful as you work to simplify and streamline your tests.</description>
    </item>
    <item>
      <title>Readable and clear tests for ASP.NET Core services</title>
      <link>https://cezarypiatek.github.io/post/component-tests-scenarios/</link>
      <pubDate>Mon, 09 Aug 2021 00:21:45 +0200</pubDate>
      <guid>https://cezarypiatek.github.io/post/component-tests-scenarios/</guid>
      <description>For the last year, I&amp;rsquo;ve had an opportunity to work quite a lot with Component Tests for microservices built with ASP.NET Core. The vocabulary related to testing is very vague and terms like Unit, Component, and Integration tests can be interpreted differently based on the context, so let me explain first what I mean by Component Tests. It&amp;rsquo;s a kind of test that treats your whole service as a black box.</description>
    </item>
    <item>
      <title>Auto generated WebAPI client library with NSwag</title>
      <link>https://cezarypiatek.github.io/post/auto-generated-web-api-client/</link>
      <pubDate>Sun, 06 Sep 2020 00:11:45 +0200</pubDate>
      <guid>https://cezarypiatek.github.io/post/auto-generated-web-api-client/</guid>
      <description>In the era of microservices and distributed systems, web browser applications written in JavaScript are not the only consumers of the REST API. Today, more and more often this type of communication is used to connect backend services, too. Integrating two services using REST protocol doesn&amp;rsquo;t require any form of shared contract which makes the process extremely easy when both sides are developed in different technologies but it comes at a price.</description>
    </item>
  </channel>
</rss>
