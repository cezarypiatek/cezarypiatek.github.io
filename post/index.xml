<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on CEZARY PIĄTEK</title>
    <link>https://cezarypiatek.github.io/post/</link>
    <description>Recent content in Posts on CEZARY PIĄTEK</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 Dec 2017 10:38:18 +0200</lastBuildDate>
    
	<atom:link href="https://cezarypiatek.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The fastest way do debug .net code without sources.</title>
      <link>https://cezarypiatek.github.io/post/debug-without-sources-part-one/</link>
      <pubDate>Sun, 10 Dec 2017 10:38:18 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/debug-without-sources-part-one/</guid>
      <description>Some people used to say that a good programmer doesn&amp;rsquo;t need to debug his own code. However, sometimes we have a problem with third party libraries usage, for example: there is insufficient documentation or the module contains some bugs. Visual Studio has excellent debugging toolset but this is totally useless without symbols and sources (and this is often the case with third party libraries). Thanks to Reshaper decompiler this shouldn’t be a problem anymore.</description>
    </item>
    
    <item>
      <title>How to manage TODO in your codebase.</title>
      <link>https://cezarypiatek.github.io/post/how-to-manage-todo-in-codebase/</link>
      <pubDate>Sun, 03 Dec 2017 10:38:18 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/how-to-manage-todo-in-codebase/</guid>
      <description>It&amp;rsquo;s a good practice to make all things done at the first approach. But in the real world it&amp;rsquo;s not always possible - for example we need to ask customer for clarification and it will take some time, or worst - we don&amp;rsquo;t have enough time right now to implement things in the right way. In order to adress this issue, a TODO was invented to mark all those places in code requiring additional work.</description>
    </item>
    
    <item>
      <title>Why clicking with Selenium is so hard.</title>
      <link>https://cezarypiatek.github.io/post/why-click-with-selenium-so-hard/</link>
      <pubDate>Thu, 05 Oct 2017 17:38:18 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/why-click-with-selenium-so-hard/</guid>
      <description>When I browse StackOverflow questions tagged with selenium label, a lot of them are related to the problem of clicking on page elements. It seems to be one of the most trivial tasks, but can cause a lot of problems. Very often invoking Click() action on webelement ends with exceptions (there is a wide range of them). The main reason is that element on which we try to click is not in &amp;ldquo;Interactable&amp;rdquo; state.</description>
    </item>
    
    <item>
      <title>Hunt your bugs in design time</title>
      <link>https://cezarypiatek.github.io/post/hunt-your-bugs-design-time/</link>
      <pubDate>Wed, 27 Apr 2016 21:27:16 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/hunt-your-bugs-design-time/</guid>
      <description>Static analysis is a powerful feature of Visual Studio that helps us to spot syntax and semantic errors in our code. It works very well on currently edited file and runs on the whole solution as one of the compilation stages. But it would be a waste of time to run compilation every time you make changes that affect code outside currently edited file, only to check that you didn&amp;rsquo;t cause any compilation errors.</description>
    </item>
    
    <item>
      <title>Save your history - TortoiseSVN and &#34;Repair move&#34; option.</title>
      <link>https://cezarypiatek.github.io/post/my-first-post/</link>
      <pubDate>Sun, 21 Sep 2014 17:38:18 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/my-first-post/</guid>
      <description>&lt;p&gt;TortoiseSVN has a function named simply “rename” which allows you to change the file name and keep the file history as well. But what if we change the file name for example during refactoring using Visual Studio? Are we fated to lose file history? Fortunately TortoiseSVN has an interesting option called “repair move”.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Don&#39;t write dull code - Resharper Live Templates</title>
      <link>https://cezarypiatek.github.io/post/livetemplates/</link>
      <pubDate>Sun, 13 Apr 2014 17:38:18 +0200</pubDate>
      
      <guid>https://cezarypiatek.github.io/post/livetemplates/</guid>
      <description>One of the greatest features of Resharper are Live Templates. They can speed up your code typing and help you focus only on what is most important (you don’t need to remember and retype anymore long ‘dull’ code constructions). Live Templates are similar to Visual Studio code snippets but are easier to define and introduce smart parameters that help you in faster code completion.
Template Explorer You can manage Live Templates in Templates Explorer from RESHARPER menu (RESHARPER -&amp;gt; Template Explorer&amp;hellip;).</description>
    </item>
    
  </channel>
</rss>